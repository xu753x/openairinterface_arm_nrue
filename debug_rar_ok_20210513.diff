diff --git a/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c b/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c
index 27bc569517..b11f3b8574 100644
--- a/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c
+++ b/openair1/PHY/NR_UE_TRANSPORT/dci_nr.c
@@ -726,8 +726,9 @@ int32_t nr_rx_pdcch(PHY_VARS_NR_UE *ue,
     rel15 = &pdcch_vars->pdcch_config[i];
     int n_rb,rb_offset;
     get_coreset_rballoc(rel15->coreset.frequency_domain_resource,&n_rb,&rb_offset);
-    LOG_D(PHY,"pdcch coreset: freq %x, n_rb %d, rb_offset %d\n",
-	  rel15->coreset.frequency_domain_resource[0],n_rb,rb_offset);
+    //if (slot == 11)
+    LOG_D(PHY,"frame %d %d rnti 0x%x space %d, pdcch coreset: freq %x, n_rb %d, rb_offset %d, symbol %d %d\n",frame, slot, i, rel15->rnti,
+	  rel15->coreset.frequency_domain_resource[0],n_rb,rb_offset, rel15->coreset.StartSymbolIndex, rel15->coreset.duration);
     for (int s=rel15->coreset.StartSymbolIndex; s<(rel15->coreset.StartSymbolIndex+rel15->coreset.duration); s++) {
       LOG_D(PHY,"in nr_pdcch_extract_rbs_single(rxdataF -> rxdataF_ext || dl_ch_estimates -> dl_ch_estimates_ext)\n");
 
@@ -754,6 +755,19 @@ int32_t nr_rx_pdcch(PHY_VARS_NR_UE *ue,
         avgs = cmax(avgs, avgP[aarx]);
 
       log2_maxh = (log2_approx(avgs) / 2) + 5;  //+frame_parms->nb_antennas_rx;
+//      if (slot == 11)
+//            LOG_I(PHY,"slot %d: pdcch log2_maxh = %d (%d,%d)\n",slot,log2_maxh,avgP[0],avgs);
+#if 0      
+      if(avgP[0] >1000)
+      {
+         static int log_int = 0;
+         if ((rel15->rnti == 0x10b) && (log_int == 0))
+         {
+           log_int = 1;
+           LOG_M("rxdataF_ra.m", "rxdataF0", &common_vars->common_vars_rx_data_per_thread[proc->thread_id].rxdataF[0][s * frame_parms->ofdm_symbol_size],frame_parms->ofdm_symbol_size,1,1);
+         }
+      } 
+#endif      
 #ifdef UE_DEBUG_TRACE
       LOG_D(PHY,"slot %d: pdcch log2_maxh = %d (%d,%d)\n",slot,log2_maxh,avgP[0],avgs);
 #endif
@@ -784,6 +798,21 @@ int32_t nr_rx_pdcch(PHY_VARS_NR_UE *ue,
                    pdcch_vars->llr,
                    s,
                    n_rb);
+
+#if 0
+      if(avgP[0] >1000)
+      {
+         static int log_int = 0;
+         if ((rel15->rnti == 0xFFFF) && (log_int == 0))
+         {
+           log_int = 1;
+           LOG_I(PHY,"log: frame %d %d rnti 0x%x space %d, pdcch coreset: freq %x, n_rb %d, rb_offset %d, symbol %d %d\n",frame, slot, i, rel15->rnti,
+	  rel15->coreset.frequency_domain_resource[0],n_rb,rb_offset, rel15->coreset.StartSymbolIndex, rel15->coreset.duration);
+           LOG_M("rxdataF_si_Fcomp.m", "si_Fcomp", &pdcch_vars->rxdataF_comp[0][s * n_rb * 12],n_rb * 12,1,1);
+           LOG_M("rxdataF_si_llr.m", "si_llr", &pdcch_vars->llr[2 * s * n_rb * 9],n_rb * 9,1,1);
+         }
+      }  
+#endif              
 #if T_TRACER
     
       //  T(T_UE_PHY_PDCCH_IQ, T_INT(frame_parms->N_RB_DL), T_INT(frame_parms->N_RB_DL),
@@ -797,6 +826,19 @@ int32_t nr_rx_pdcch(PHY_VARS_NR_UE *ue,
     }
 
     LOG_D(PHY,"we enter nr_pdcch_demapping_deinterleaving()\n");
+    
+    if (slot == 11)
+    {
+      LOG_D(PHY, "pdcch frame %d slot %d, dur %d, rb %d, RegBundleSize %d, InterleaverSize %d, ShiftIndex %d, candidates %d\n",
+                                      frame, slot,
+                                      rel15->coreset.duration,
+                                      n_rb,
+                                      rel15->coreset.RegBundleSize,
+                                      rel15->coreset.InterleaverSize,
+                                      rel15->coreset.ShiftIndex,
+                                      rel15->number_of_candidates
+      );
+    }
     nr_pdcch_demapping_deinterleaving((uint32_t *) pdcch_vars->llr,
                                       (uint32_t *) pdcch_vars->e_rx,
                                       rel15->coreset.duration,
@@ -807,6 +849,20 @@ int32_t nr_rx_pdcch(PHY_VARS_NR_UE *ue,
                                       rel15->number_of_candidates,
                                       rel15->CCE,
                                       rel15->L);
+
+#if 0
+      if(avgP[0] >1000)
+      {
+         static int log_int = 0;
+         if ((rel15->rnti == 0x10b) && (log_int == 0))
+         {
+           log_int = 1;
+           LOG_I(PHY,"log: frame %d %d  rnti 0x%x space %d, pdcch coreset: freq %x, n_rb %d, rb_offset %d, symbol %d %d\n",frame, slot, i, rel15->rnti,
+	  rel15->coreset.frequency_domain_resource[0],n_rb,rb_offset, rel15->coreset.StartSymbolIndex, rel15->coreset.duration);
+           LOG_M("rxdataF_ra_e_rx.m", "ra_e_rx", &pdcch_vars->e_rx[0],n_rb * 9,1,1);
+         }
+      }  
+#endif                              
     /*
     nr_pdcch_unscrambling(rel15->rnti,
                           frame_parms,
@@ -928,9 +984,11 @@ uint8_t nr_dci_decoding_procedure(PHY_VARS_NR_UE *ue,
                                           currentPtrDCI);
 
         n_rnti = rel15->rnti;
-	LOG_D(PHY, "(%i.%i) dci indication (rnti %x,dci format %s,n_CCE %d,payloadSize %d)\n", proc->frame_rx, proc->nr_slot_rx,n_rnti,nr_dci_format_string[rel15->dci_format_options[k]],CCEind,dci_length);
+        if ((proc->nr_slot_rx == 11) || (proc->nr_slot_rx == 0))
+	LOG_D(PHY, "(%i.%i) dci indication (rnti %x,dci format %s,n_CCE %d, L %d, payloadSize %d), scramble rnti %d, scramble id %d, crc %d\n", 
+  proc->frame_rx, proc->nr_slot_rx,n_rnti,nr_dci_format_string[rel15->dci_format_options[k]],CCEind, L, dci_length, rel15->coreset.scrambling_rnti, rel15->coreset.pdcch_dmrs_scrambling_id, crc);
         if (crc == n_rnti) {
-          LOG_D(PHY, "(%i.%i) Received dci indication (rnti %x,dci format %s,n_CCE %d,payloadSize %d,payload %llx)\n",
+          LOG_I(PHY, "(%i.%i) Received dci indication (rnti %x,dci format %s,n_CCE %d,payloadSize %d,payload %llx)\n",
                 proc->frame_rx, proc->nr_slot_rx,n_rnti,nr_dci_format_string[rel15->dci_format_options[k]],CCEind,dci_length,*(unsigned long long*)dci_estimation);
           dci_ind->SFN = proc->frame_rx;
           dci_ind->slot = proc->nr_slot_rx;
diff --git a/openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_decoding.c b/openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_decoding.c
index b85b777566..1dd58be9c2 100644
--- a/openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_decoding.c
+++ b/openair1/PHY/NR_UE_TRANSPORT/nr_dlsch_decoding.c
@@ -354,7 +354,7 @@ uint32_t nr_dlsch_decoding(PHY_VARS_NR_UE *phy_vars_ue,
   harq_process->G = nr_get_G(nb_rb, nb_symb_sch, nb_re_dmrs, dmrs_length, harq_process->Qm,harq_process->Nl);
   G = harq_process->G;
 
-  LOG_D(PHY,"DLSCH Decoding, harq_pid %d TBS %d (%d) G %d nb_re_dmrs %d mcs %d Nl %d nb_symb_sch %d nb_rb %d\n",harq_pid,A,A/8,G, nb_re_dmrs,harq_process->mcs, harq_process->Nl, nb_symb_sch,nb_rb);
+  LOG_I(PHY,"DLSCH Decoding, harq_pid %d TBS %d (%d) G %d nb_re_dmrs %d mcs %d Nl %d nb_symb_sch %d nb_rb %d\n",harq_pid,A,A/8,G, nb_re_dmrs,harq_process->mcs, harq_process->Nl, nb_symb_sch,nb_rb);
 
   if ((harq_process->R)<1024)
     Coderate = (float) (harq_process->R) /(float) 1024;
@@ -622,7 +622,7 @@ uint32_t nr_dlsch_decoding(PHY_VARS_NR_UE *phy_vars_ue,
   }
 
   if (err_flag == 1) {
-    LOG_D(PHY,"[UE %d] DLSCH: Setting NAK for SFN/SF %d/%d (pid %d, status %d, round %d, TBS %d, mcs %d) Kr %d r %d harq_process->round %d\n",
+    LOG_I(PHY,"[UE %d] DLSCH: Setting NAK for SFN/SF %d/%d (pid %d, status %d, round %d, TBS %d, mcs %d) Kr %d r %d harq_process->round %d\n",
         phy_vars_ue->Mod_id, frame, nr_slot_rx, harq_pid,harq_process->status, harq_process->round,harq_process->TBS,harq_process->mcs,Kr,r,harq_process->round);
 
     harq_process->harq_ack.ack = 0;
@@ -645,7 +645,7 @@ uint32_t nr_dlsch_decoding(PHY_VARS_NR_UE *phy_vars_ue,
     return((1 + dlsch->max_ldpc_iterations));
   } else {
 
-    LOG_D(PHY,"[UE %d] DLSCH: Setting ACK for nr_slot_rx %d TBS %d mcs %d nb_rb %d harq_process->round %d\n",
+    LOG_I(PHY,"[UE %d] DLSCH: Setting ACK for nr_slot_rx %d TBS %d mcs %d nb_rb %d harq_process->round %d\n",
 	  phy_vars_ue->Mod_id,nr_slot_rx,harq_process->TBS,harq_process->mcs,harq_process->nb_rb, harq_process->round);
 
     harq_process->status = SCH_IDLE;
diff --git a/openair1/PHY/NR_UE_TRANSPORT/nr_prach.c b/openair1/PHY/NR_UE_TRANSPORT/nr_prach.c
index 76fe180aba..d4977a180e 100644
--- a/openair1/PHY/NR_UE_TRANSPORT/nr_prach.c
+++ b/openair1/PHY/NR_UE_TRANSPORT/nr_prach.c
@@ -186,9 +186,9 @@ int32_t generate_nr_prach(PHY_VARS_NR_UE *ue, uint8_t gNB_id, uint8_t slot){
   // now generate PRACH signal
 #ifdef NR_PRACH_DEBUG
     if (NCS>0)
-      LOG_I(PHY, "PRACH [UE %d] generate PRACH in slot %d for RootSeqIndex %d, Preamble Index %d, PRACH Format %s, NCS %d (N_ZC %d): Preamble_offset %d, Preamble_shift %d msg1 frequency start %d\n",
+      LOG_I(PHY, "PRACH [UE %d] generate PRACH in slot %d preamble_index %d for RootSeqIndex %d, Preamble Index %d, PRACH Format %s, NCS %d (N_ZC %d): Preamble_offset %d, Preamble_shift %d msg1 frequency start %d\n",
         Mod_id,
-        slot,
+        slot, preamble_index,
         rootSequenceIndex,
         preamble_index,
         prachfmt[prach_fmt_id],
@@ -217,8 +217,8 @@ int32_t generate_nr_prach(PHY_VARS_NR_UE *ue, uint8_t gNB_id, uint8_t slot){
   k += kbar;
   k *= 2;
 
-  LOG_I(PHY, "PRACH [UE %d] in slot %d, placing PRACH in position %d, msg1 frequency start %d (k1 %d), preamble_offset %d, first_nonzero_root_idx %d\n", Mod_id,
-	slot,
+  LOG_I(PHY, "PRACH [UE %d] in slot %d, preamble_index %d, placing PRACH in position %d, msg1 frequency start %d (k1 %d), preamble_offset %d, first_nonzero_root_idx %d\n", Mod_id,
+	slot, preamble_index,
 	k,
 	n_ra_prb,
 	nrUE_config->prach_config.num_prach_fd_occasions_list[fd_occasion].k1,
diff --git a/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c b/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c
index 1680b59ab7..51f01fcf4c 100644
--- a/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c
+++ b/openair1/SCHED_NR_UE/phy_procedures_nr_ue.c
@@ -689,7 +689,7 @@ int nr_ue_pdcch_procedures(uint8_t gNB_id,
   //LOG_D(PHY,"[UE  %d][PUSCH] Frame %d nr_slot_rx %d PHICH RX\n",ue->Mod_id,frame_rx,nr_slot_rx);
 
   for (int i=0; i<dci_cnt; i++) {
-    LOG_D(PHY,"[UE  %d] AbsSubFrame %d.%d, Mode %s: DCI %i of %d total DCIs found --> rnti %x : format %d\n",
+    LOG_I(PHY,"[UE  %d] AbsSubFrame %d.%d, Mode %s: DCI %i of %d total DCIs found --> rnti %x : format %d\n",
       ue->Mod_id,frame_rx%1024,nr_slot_rx,nr_mode_string[ue->UE_mode[gNB_id]],
       i + 1,
       dci_cnt,
@@ -772,7 +772,8 @@ int nr_ue_pdsch_procedures(PHY_VARS_NR_UE *ue, UE_nr_rxtx_proc_t *proc, int eNB_
     uint16_t s1             = dlsch0_harq->nb_symbols;
     bool is_SI              = dlsch0->rnti_type == _SI_RNTI_;
 
-    LOG_D(PHY,"[UE %d] PDSCH type %d active in nr_slot_rx %d, harq_pid %d (%d), rb_start %d, nb_rb %d, symbol_start %d, nb_symbols %d, DMRS mask %x\n",ue->Mod_id,pdsch,nr_slot_rx,harq_pid,dlsch0->harq_processes[harq_pid]->status,pdsch_start_rb,pdsch_nb_rb,s0,s1,dlsch0->harq_processes[harq_pid]->dlDmrsSymbPos);
+    
+    LOG_I(PHY,"[UE %d] PDSCH type %d active in nr_slot_rx %d, harq_pid %d (%d), rb_start %d, nb_rb %d, symbol_start %d, nb_symbols %d, DMRS mask %x\n",ue->Mod_id,pdsch,nr_slot_rx,harq_pid,dlsch0->harq_processes[harq_pid]->status,pdsch_start_rb,pdsch_nb_rb,s0,s1,dlsch0->harq_processes[harq_pid]->dlDmrsSymbPos);
 
     for (m = s0; m < (s0 +s1); m++) {
       if (((1<<m)&dlsch0->harq_processes[harq_pid]->dlDmrsSymbPos) > 0) {
diff --git a/openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c b/openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c
index df5bb70c06..bc7c42daa5 100644
--- a/openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c
+++ b/openair2/LAYER2/NR_MAC_UE/nr_ra_procedures.c
@@ -365,7 +365,9 @@ void ra_preambles_config(NR_PRACH_RESOURCES_t *prach_resources, NR_UE_MAC_INST_t
       ra->ra_PreambleIndex = ra->starting_preamble_nb + sizeOfRA_PreamblesGroupA + ((taus()) % (ra->cb_preambles_per_ssb - sizeOfRA_PreamblesGroupA));
     }
   }
-  prach_resources->ra_PreambleIndex = ra->ra_PreambleIndex;
+  //prach_resources->ra_PreambleIndex = ra->ra_PreambleIndex;
+  prach_resources->ra_PreambleIndex = ra->starting_preamble_nb;
+
 }
 
 // RA-RNTI computation (associated to PRACH occasion in which the RA Preamble is transmitted)
@@ -385,7 +387,7 @@ uint16_t set_ra_rnti(NR_UE_MAC_INST_t *mac, fapi_nr_ul_config_prach_pdu *prach_p
 
   ra->ra_rnti = 1 + s_id + 14 * t_id + 1120 * f_id + 8960 * ul_carrier_id;
 
-  LOG_D(MAC, "Computed ra_RNTI is %x \n", ra->ra_rnti);
+  LOG_I(MAC, "Computed ra_RNTI is %x \n", ra->ra_rnti);
 
   return ra->ra_rnti;
 
diff --git a/openair2/LAYER2/NR_MAC_UE/nr_ue_dci_configuration.c b/openair2/LAYER2/NR_MAC_UE/nr_ue_dci_configuration.c
index a8bf67834b..1356d451a6 100644
--- a/openair2/LAYER2/NR_MAC_UE/nr_ue_dci_configuration.c
+++ b/openair2/LAYER2/NR_MAC_UE/nr_ue_dci_configuration.c
@@ -54,7 +54,7 @@ dci_pdu_rel15_t *def_dci_pdu_rel15;
 void fill_dci_search_candidates(NR_SearchSpace_t *ss,fapi_nr_dl_config_dci_dl_pdu_rel15_t *rel15) {
 
   LOG_D(MAC,"Filling search candidates for DCI\n");
-
+  
   uint8_t aggregation;
   find_aggregation_candidates(&aggregation,
                               &rel15->number_of_candidates,
@@ -171,8 +171,17 @@ void config_dci_pdu(NR_UE_MAC_INST_t *mac, fapi_nr_dl_config_dci_dl_pdu_rel15_t
     } else { // NSA mode is not using the Initial BWP
       rel15->BWPStart = NRRIV2PRBOFFSET(bwp_Common->genericParameters.locationAndBandwidth, MAX_BWP_SIZE);
     }
+    rel15->BWPSize = mac->type0_PDCCH_CSS_config.num_rbs;
+    rel15->BWPStart = mac->type0_PDCCH_CSS_config.cset_start_rb;
     rel15->SubcarrierSpacing = initialDownlinkBWP->genericParameters.subcarrierSpacing;
     rel15->dci_length_options[0] = nr_dci_size(initialUplinkBWP, mac->cg, def_dci_pdu_rel15, rel15->dci_format_options[0], NR_RNTI_RA, rel15->BWPSize, bwp_id);
+    LOG_D(PHY, "ss_id %d， ra rnti bwp %d %d, dci len %d freqsource 0x %2x %2x %2x %2x %2x %2x\n", ss_id, rel15->BWPStart, rel15->BWPSize, rel15->dci_length_options[0],
+    rel15->coreset.frequency_domain_resource[0],
+    rel15->coreset.frequency_domain_resource[1],
+    rel15->coreset.frequency_domain_resource[2],
+    rel15->coreset.frequency_domain_resource[3],
+    rel15->coreset.frequency_domain_resource[4],
+    rel15->coreset.frequency_domain_resource[5]);
     break;
     case NR_RNTI_P:
     break;
@@ -205,6 +214,14 @@ void config_dci_pdu(NR_UE_MAC_INST_t *mac, fapi_nr_dl_config_dci_dl_pdu_rel15_t
 
       for (int i = 0; i < rel15->num_dci_options; i++) {
         rel15->dci_length_options[i] = nr_dci_size(initialUplinkBWP, mac->cg, def_dci_pdu_rel15, rel15->dci_format_options[i], NR_RNTI_SI, rel15->BWPSize, 0);
+        //LOG_I(PHY, "si rnti bwp %d %d, dci len %d\n", rel15->BWPStart, rel15->BWPSize, rel15->dci_length_options[0]);
+        LOG_D(PHY, "ss_id %d， si rnti bwp %d %d, dci len %d freqsource 0x %2x %2x %2x %2x %2x %2x\n", ss_id, rel15->BWPStart, rel15->BWPSize, rel15->dci_length_options[0],
+            rel15->coreset.frequency_domain_resource[0],
+            rel15->coreset.frequency_domain_resource[1],
+            rel15->coreset.frequency_domain_resource[2],
+            rel15->coreset.frequency_domain_resource[3],
+            rel15->coreset.frequency_domain_resource[4],
+            rel15->coreset.frequency_domain_resource[5]);
       }
     break;
     case NR_RNTI_SFI:
diff --git a/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c b/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c
index fca085c16c..d45505f2c9 100644
--- a/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c
+++ b/openair2/LAYER2/NR_MAC_UE/nr_ue_procedures.c
@@ -629,6 +629,8 @@ int8_t nr_ue_process_dci(module_id_t module_id, int cc_id, uint8_t gNB_index, fr
     } else {
       if (ra->RA_window_cnt >= 0 && rnti == ra->ra_rnti){
         dl_config->dl_config_list[dl_config->number_pdus].pdu_type = FAPI_NR_DL_CONFIG_TYPE_RA_DLSCH;
+
+       
       } else {
         dl_config->dl_config_list[dl_config->number_pdus].pdu_type = FAPI_NR_DL_CONFIG_TYPE_DLSCH;
       }
@@ -646,6 +648,14 @@ int8_t nr_ue_process_dci(module_id_t module_id, int cc_id, uint8_t gNB_index, fr
           pdsch_config = mac->DLbwp[0]->bwp_Dedicated->pdsch_Config->choice.setup;
           BWPSize = dlsch_config_pdu_1_0->BWPSize;
         }
+       
+        dlsch_config_pdu_1_0->BWPSize = mac->type0_PDCCH_CSS_config.num_rbs;
+        dlsch_config_pdu_1_0->BWPStart = mac->type0_PDCCH_CSS_config.cset_start_rb;
+        dlsch_config_pdu_1_0->SubcarrierSpacing = mac->mib->subCarrierSpacingCommon;
+        if (pdsch_config) pdsch_config->dmrs_DownlinkForPDSCH_MappingTypeA->choice.setup->dmrs_AdditionalPosition = NULL; // For PDSCH with mapping type A, the UE shall assume dmrs-AdditionalPosition='pos2'
+        BWPSize = dlsch_config_pdu_1_0->BWPSize;
+
+
       } else if (mac->DLbwp[0]) {
         dlsch_config_pdu_1_0->BWPSize = NRRIV2BW(mac->DLbwp[0]->bwp_Common->genericParameters.locationAndBandwidth, MAX_BWP_SIZE);
         dlsch_config_pdu_1_0->BWPStart = NRRIV2PRBOFFSET(mac->DLbwp[0]->bwp_Common->genericParameters.locationAndBandwidth, MAX_BWP_SIZE);
@@ -658,7 +668,7 @@ int8_t nr_ue_process_dci(module_id_t module_id, int cc_id, uint8_t gNB_index, fr
         pdsch_config = NULL;
       }
     }
-
+    LOG_I(MAC, "rar : bwp %d %d\n", dlsch_config_pdu_1_0->BWPStart, dlsch_config_pdu_1_0->BWPSize);
     /* IDENTIFIER_DCI_FORMATS */
     /* FREQ_DOM_RESOURCE_ASSIGNMENT_DL */
     if (nr_ue_process_dci_freq_dom_resource_assignment(NULL,dlsch_config_pdu_1_0,0,BWPSize,dci->frequency_domain_assignment.val) < 0) {
@@ -1173,6 +1183,10 @@ uint8_t nr_extract_dci_info(NR_UE_MAC_INST_t *mac,
       } else {
         N_RB = get_n_rb(mac, rnti_type);
       }
+      N_RB = mac->type0_PDCCH_CSS_config.num_rbs;
+      // Freq domain assignment 0-16 bit
+      fsize = (int)ceil( log2( (N_RB*(N_RB+1))>>1 ) );
+      pos+=fsize;
       // Freq domain assignment
       fsize = (int)ceil( log2( (N_RB*(N_RB+1))>>1 ) );
       pos=fsize;
@@ -1205,6 +1219,18 @@ uint8_t nr_extract_dci_info(NR_UE_MAC_INST_t *mac,
 #ifdef DEBUG_EXTRACT_DCI
       LOG_D(MAC,"tb_scaling %d  (2 bits)=> %d (0x%lx)\n",dci_pdu_rel15->tb_scaling,dci_size-pos,*dci_pdu);
 #endif
+
+      LOG_I(MAC,"N_RB = %i\n", N_RB);
+      LOG_I(MAC,"dci_size = %i\n", dci_size);
+      LOG_I(MAC,"fsize = %i\n", fsize);
+      LOG_I(MAC,"dci_pdu_rel15->frequency_domain_assignment.val = %i\n", dci_pdu_rel15->frequency_domain_assignment.val);
+      LOG_I(MAC,"dci_pdu_rel15->time_domain_assignment.val = %i\n", dci_pdu_rel15->time_domain_assignment.val);
+      LOG_I(MAC,"dci_pdu_rel15->vrb_to_prb_mapping.val = %i\n", dci_pdu_rel15->vrb_to_prb_mapping.val);
+      LOG_I(MAC,"dci_pdu_rel15->mcs = %i\n", dci_pdu_rel15->mcs);
+      LOG_I(MAC,"dci_pdu_rel15->rv = %i\n", dci_pdu_rel15->rv);
+      LOG_I(MAC,"dci_pdu_rel15->system_info_indicator = %i\n", dci_pdu_rel15->system_info_indicator);
+
+
       break;
 
     case NR_RNTI_C:
